// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TeaStaking {
    string public name = "TeaStaking";
    address public owner;
    IERC20 public teaToken;
    uint256 public rewardRate = 100; // Example reward rate

    struct Stake {
        uint256 amount;
        uint256 timestamp;
    }

    mapping(address => Stake) public stakes;
    mapping(address => uint256) public rewards;

    event Staked(address indexed user, uint256 amount);
    event Unstaked(address indexed user, uint256 amount, uint256 reward);

    constructor(IERC20 _teaToken) {
        teaToken = _teaToken;
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    function setRewardRate(uint256 _rewardRate) public onlyOwner {
        rewardRate = _rewardRate;
    }

    function stake(uint256 _amount) public {
        require(_amount > 0, "Amount must be greater than 0");
        require(teaToken.transferFrom(msg.sender, address(this), _amount), "Token transfer failed");

        if (stakes[msg.sender].amount > 0) {
            uint256 reward = calculateReward(msg.sender);
            rewards[msg.sender] += reward;
        }

        stakes[msg.sender] = Stake(_amount, block.timestamp);
        emit Staked(msg.sender, _amount);
    }

    function unstake() public {
        Stake memory userStake = stakes[msg.sender];
        require(userStake.amount > 0, "No staked amount found");

        uint256 reward = calculateReward(msg.sender);
        uint256 totalAmount = userStake.amount + reward + rewards[msg.sender];

        stakes[msg.sender].amount = 0;
        rewards[msg.sender] = 0;

        require(teaToken.transfer(msg.sender, totalAmount), "Token transfer failed");
        emit Unstaked(msg.sender, userStake.amount, reward);
    }

    function calculateReward(address _staker) public view returns (uint256) {
        Stake memory userStake = stakes[_staker];
        uint256 stakingDuration = block.timestamp - userStake.timestamp;
        return (userStake.amount * stakingDuration * rewardRate) / (365 days * 100);
    }

    function getStake(address _staker) public view returns (uint256, uint256) {
        return (stakes[_staker].amount, stakes[_staker].timestamp);
    }

    function getReward(address _staker) public view returns (uint256) {
        return rewards[_staker] + calculateReward(_staker);
    }
}

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function
