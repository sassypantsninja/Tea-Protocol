// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TeaToken {
    string public name = "TeaToken";
    string public symbol = "TEA";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Mint(address indexed to, uint256 value);

    constructor(uint256 initialSupply) {
        totalSupply = initialSupply * 10 ** uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
        emit Mint(msg.sender, totalSupply);
    }

    function mint(address to, uint256 amount) public {
        require(to != address(0), "Invalid address");
        uint256 amountWithDecimals = amount * 10 ** uint256(decimals);
        totalSupply += amountWithDecimals;
        balanceOf[to] += amountWithDecimals;
        emit Mint(to, amountWithDecimals);
    }

    function transfer(address to, uint256 amount) public returns (bool success) {
        require(to != address(0), "Invalid address");
        require(balanceOf[msg.sender] >= amount, "Insufficient balance");

        balanceOf[msg.sender] -= amount;
        balanceOf[to] += amount;
        emit Transfer(msg.sender, to, amount);
        return true;
    }

    function balanceOf(address account) public view returns (uint256) {
        return balanceOf[account];
    }
}
